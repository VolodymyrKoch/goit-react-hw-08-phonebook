{"version":3,"sources":["components/ErrorMassage/ErrorMassage.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","App.module.css","components/ErrorMassage/ErrorMassage.js","redux/reducers/contacts/contactsSelectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","pages/Contacts/ContactsPage.js"],"names":["module","exports","ErrorMassage","className","classes","errorMassage","getContact","state","auth","items","getFilter","filter","getFilteredItems","createSelector","console","log","contactItem","name","toLowerCase","includes","getVisibleFilter","length","INITIAL_STATE","number","erroMasage","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","contacts","find","item","setTimeout","addContact","CSSTransition","in","classNames","timeout","appear","unmountOnExit","tilie","contactFormConteiner","action","contactForm","onSubmit","this","lableName","htmlFor","type","placeholder","onChange","classesEror","Component","mapDispatchToProps","connect","contactSelector","filterRender","changeFilter","visibleFilter","title","deleteItem","removeContact","array","TransitionGroup","component","map","onClick","id","App","onGetContact","conteiner","getContacts"],"mappings":"yJACAA,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,4BAA4B,YAAc,kCAAkC,KAAO,2BAA2B,WAAa,mC,oBCAvMD,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,qBAAuB,0CAA0C,UAAY,+BAA+B,YAAc,mC,oBCA/KD,EAAOC,QAAU,CAAC,MAAQ,wB,0CCA1BD,EAAOC,QAAU,CAAC,UAAY,yB,oMCQfC,MANf,WACE,OACE,qBAAKC,UAAWC,IAAQC,aAAxB,sC,QCHEC,EAAa,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,OAEjCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,KAAKG,QAcvB,GACbL,aACAM,iBAZuBC,YACvB,CAACP,EAAYI,IACb,SAACF,EAAMG,GAEL,OADAG,QAAQC,IAAIP,GACLA,EAAKG,QAAO,SAAAK,GAAW,OAC5BA,EAAYC,KAAKC,cAAcC,SAASR,EAAOO,qBAQnDE,iBAfuB,SAAAb,GAAK,OAAIA,EAAMC,KAAKC,MAAMY,OAAS,GAgB1DX,aCZIY,EAAgB,CACpBL,KAAM,GACNM,OAAQ,GACRC,YAAY,GAGRC,E,4MACJlB,M,eACKe,G,EAELI,aAAe,SAAAC,GAAM,IAAD,EACMA,EAAEC,OAAlBX,EADU,EACVA,KAAMY,EADI,EACJA,MACd,EAAKC,SAAL,eACGb,EAAOY,K,EAGZE,aAAe,SAAAJ,GAIb,GAHAA,EAAEK,iBACFlB,QAAQC,IAAI,EAAKkB,MAAMC,UAEnB,EAAKD,MAAMC,SAASC,MAAK,SAAAC,GAAI,OAAIA,EAAKnB,OAAS,EAAKV,MAAMU,QAC5D,EAAKa,SAAS,CAAEN,YAAY,IAC5Ba,YAAW,WACT,EAAKP,SAAS,CAAEN,YAAY,MAC3B,UACE,CAAC,IAAD,EACoB,EAAKjB,MAAtBU,EADH,EACGA,KAAMM,EADT,EACSA,OACd,EAAKU,MAAMK,WAAW,CAAErB,OAAMM,WAGhC,EAAKO,SAAS,CAAEb,KAAM,GAAIM,OAAQ,M,uDAIlC,OACE,qCACE,cAACgB,EAAA,EAAD,CACEC,IAAI,EACJC,WAAW,OACXC,QAAS,IACTC,QAAQ,EACRC,eAAa,EALf,SAOE,oBAAIzC,UAAWC,IAAQyC,MAAvB,yBAEF,qBAAK1C,UAAWC,IAAQ0C,qBAAxB,SACE,uBACEC,OAAO,SACP5C,UAAWC,IAAQ4C,YACnBC,SAAUC,KAAKnB,aAHjB,UAKE,sBAAK5B,UAAWC,IAAQ+C,UAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,uBACEC,KAAK,OACLpC,KAAK,OACLqC,YAAY,aACZzB,MAAOqB,KAAK3C,MAAMU,KAClBsC,SAAUL,KAAKxB,kBAInB,sBAAKvB,UAAWC,IAAQ+C,UAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBACEC,KAAK,OACLpC,KAAK,SACLqC,YAAY,eACZzB,MAAOqB,KAAK3C,MAAMgB,OAClBgC,SAAUL,KAAKxB,kBAGnB,wBAAQ2B,KAAK,SAAb,+BAGJ,cAACd,EAAA,EAAD,CACEC,GAAIU,KAAK3C,MAAMiB,WACfkB,QAAS,IACTC,QAAQ,EACRF,WAAU,eAAOe,KACjBZ,eAAa,EALf,SAOE,cAAC,EAAD,a,GA5EgBa,aAuFpBC,EAAqB,CACzBpB,WAAYA,KAGCqB,eARS,SAACpD,EAAO0B,GAAR,MAAmB,CACzCC,SAAU0B,EAAgBtD,WAAWC,MAOCmD,EAAzBC,CAA6ClC,G,kBCpE5D,IAAMiC,EAAqB,CACzBG,a,KAAcC,GAQDH,eANS,SAAApD,GACtB,MAAO,CACLI,OAAQiD,EAAgBlD,UAAUH,GAClCwD,cAAeH,EAAgBxC,iBAAiBb,MAGZmD,EAAzBC,EArCf,YAA0D,IAAxChD,EAAuC,EAAvCA,OAAQkD,EAA+B,EAA/BA,aAAcE,EAAiB,EAAjBA,cACtC,OACE,cAACxB,EAAA,EAAD,CACEC,GAAIuB,EACJrB,QAAS,IACTC,QAAQ,EACRF,WAAW,OACXG,eAAa,EALf,SAOE,kCACE,oBAAIzC,UAAWC,IAAQ4D,MAAvB,oBACA,uBACEX,KAAK,OACLpC,KAAK,SACLqC,YAAY,SACZzB,MAAOlB,EACP4C,SAAU,SAAA5B,GAAC,OAAIkC,EAAalC,EAAEC,OAAOC,kB,kBCczC6B,EAAqB,CACzBO,WAAYC,KA0BCP,eAvBS,SAAApD,GAEtB,MAAO,CAAE4D,MAAOP,EAAgBhD,iBAAiBL,MAqBXmD,EAAzBC,EA3DK,YAAkC,IAAtBQ,EAAqB,EAArBA,MAAOF,EAAc,EAAdA,WAErC,OADAnD,QAAQC,IAAIoD,GAEV,mCACE,cAACC,EAAA,EAAD,CAAiBC,UAAU,KAAKlE,UAAU,cAA1C,SACGgE,EAAMG,KAAI,SAAAlC,GAAI,OACb,cAACG,EAAA,EAAD,CAA6BG,QAAS,IAAKD,WAAW,OAAtD,SACE,+BACGL,EAAKnB,KADR,KACgBmB,EAAKb,OACnB,wBAAQ8B,KAAK,SAASkB,QAAS,kBAAMN,EAAW7B,EAAKoC,KAArD,sBAFOpC,EAAKoC,KADIpC,EAAKoC,c,kBCL7BC,G,yLAEFvB,KAAKjB,MAAMyC,iB,+BAIX,OACE,mCACE,sBAAKvE,UAAWC,IAAQuE,UAAxB,UACE,cAAC,EAAD,IAEA,cAAC,EAAD,IAEA,cAAC,EAAD,a,GAbQlB,cAoBZC,EAAqB,CACzBgB,aAAcE,KAGDjB,sBAAQ,KAAMD,EAAdC,CAAkCc","file":"static/js/5.3241514a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMassage\":\"ErrorMassage_errorMassage__1wW2n\",\"enter\":\"ErrorMassage_enter__3hRmf\",\"enterActive\":\"ErrorMassage_enterActive__hs6kd\",\"exit\":\"ErrorMassage_exit__oVsIO\",\"exitActive\":\"ErrorMassage_exitActive__1pfN7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tilie\":\"ContactForm_tilie__1_eLa\",\"contactFormConteiner\":\"ContactForm_contactFormConteiner__1tDTv\",\"lableName\":\"ContactForm_lableName__306oY\",\"contactForm\":\"ContactForm_contactForm__1aHnb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__1wuNt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"conteiner\":\"App_conteiner__1VhCf\"};","import React from 'react';\nimport classes from './ErrorMassage.module.css';\n\nfunction ErrorMassage() {\n  return (\n    <div className={classes.errorMassage}>{`Is already in contacts.`}</div>\n  );\n}\n\nexport default ErrorMassage;\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContact = state => state.auth.items;\r\n\r\nconst getFilter = state => state.auth.filter;\r\n\r\nconst getVisibleFilter = state => state.auth.items.length > 1;\r\n\r\nconst getFilteredItems = createSelector(\r\n  [getContact, getFilter],\r\n  (auth, filter) => {\r\n    console.log(auth);\r\n    return auth.filter(contactItem =>\r\n      contactItem.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getContact,\r\n  getFilteredItems,\r\n  getVisibleFilter,\r\n  getFilter,\r\n};\r\n","import React, { Component } from 'react';\nimport classes from './ContactForm.module.css';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport '../../components/anime.css';\nimport { addContact } from '../../redux/reducers/contacts/contactsOperations.js';\nimport classesEror from '../ErrorMassage/ErrorMassage.module.css';\nimport ErrorMassage from '../ErrorMassage/ErrorMassage.js';\nimport contactSelector from '../../redux/reducers/contacts/contactsSelectors.js';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n  erroMasage: false,\n};\n\nclass ContactForm extends Component {\n  state = {\n    ...INITIAL_STATE,\n  };\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    console.log(this.props.contacts);\n\n    if (this.props.contacts.find(item => item.name === this.state.name)) {\n      this.setState({ erroMasage: true });\n      setTimeout(() => {\n        this.setState({ erroMasage: false });\n      }, 1500);\n    } else {\n      const { name, number } = this.state;\n      this.props.addContact({ name, number });\n    }\n\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <>\n        <CSSTransition\n          in={true}\n          classNames=\"logo\"\n          timeout={500}\n          appear={true}\n          unmountOnExit\n        >\n          <h2 className={classes.tilie}>Phonebook</h2>\n        </CSSTransition>\n        <div className={classes.contactFormConteiner}>\n          <form\n            action=\"submit\"\n            className={classes.contactForm}\n            onSubmit={this.handleSubmit}\n          >\n            <div className={classes.lableName}>\n              <label htmlFor=\"name\">Name</label>\n              <input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"enter name\"\n                value={this.state.name}\n                onChange={this.handleChange}\n              />\n            </div>\n\n            <div className={classes.lableName}>\n              <label htmlFor=\"number\">Number</label>\n              <input\n                type=\"text\"\n                name=\"number\"\n                placeholder=\"enter number\"\n                value={this.state.number}\n                onChange={this.handleChange}\n              />\n            </div>\n            <button type=\"submit\">Add contacts</button>\n          </form>\n        </div>\n        <CSSTransition\n          in={this.state.erroMasage}\n          timeout={250}\n          appear={true}\n          classNames={{ ...classesEror }}\n          unmountOnExit\n        >\n          <ErrorMassage />\n        </CSSTransition>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => ({\n  contacts: contactSelector.getContact(state),\n});\n\nconst mapDispatchToProps = {\n  addContact: addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './Filter.module.css';\nimport { CSSTransition } from 'react-transition-group';\nimport '../../components/anime.css';\nimport '../anime.css';\nimport { connect } from 'react-redux';\n\nimport { changeFilter } from '../../redux/reducers/contacts/contactsActions.js';\nimport contactSelector from '../../redux/reducers/contacts/contactsSelectors.js';\n\nfunction Filter({ filter, filterRender, visibleFilter }) {\n  return (\n    <CSSTransition\n      in={visibleFilter}\n      timeout={250}\n      appear={true}\n      classNames=\"logo\"\n      unmountOnExit\n    >\n      <label>\n        <h2 className={classes.title}>Filter</h2>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Finder\"\n          value={filter}\n          onChange={e => filterRender(e.target.value)}\n        />\n      </label>\n    </CSSTransition>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  filterRender: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  filterRender: changeFilter,\n};\nconst mapStateToProps = state => {\n  return {\n    filter: contactSelector.getFilter(state),\n    visibleFilter: contactSelector.getVisibleFilter(state),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactList.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport '../../components/anime.css';\nimport { removeContact } from '../../redux/reducers/contacts/contactsOperations.js';\nimport contactSelector from '../../redux/reducers/contacts/contactsSelectors.js';\n\nconst ContactList = function ({ array, deleteItem }) {\n  console.log(array);\n  return (\n    <>\n      <TransitionGroup component=\"ul\" className=\"contactList\">\n        {array.map(item => (\n          <CSSTransition key={item.id} timeout={250} classNames=\"item\">\n            <li key={item.id}>\n              {item.name}: {item.number}\n              <button type=\"button\" onClick={() => deleteItem(item.id)}>\n                Delete\n              </button>\n            </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </>\n  );\n};\nContactList.propTypes = {\n  array: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  deleteItem: PropTypes.func.isRequired,\n};\n\n// ---------------------1-version-filtering-----\n\nconst mapDispatchToProps = {\n  deleteItem: removeContact,\n};\n\nconst mapStateToProps = state => {\n  // console.log(state);\n  return { array: contactSelector.getFilteredItems(state) };\n};\n// ----------------------2-version-filtering- з диструктуризацією------------\n// const mapStateToProps = state => {\n//     const { items, filter } = state.contacts;\n//   const handleFilter = items.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n//   return {\n//     array: handleFilter,\n//   };\n// };\n// -----------------------3-version-filtering-без диструктуризації--------\n// const mapStateToProps = state => {\n//   return {\n//     array: state.contacts.items.filter(contact =>\n//       contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\n//     ),\n//   };\n// };\n// ---------------------------------\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from 'react';\r\nimport ContactForm from '../../components/ContactForm/ContactForm.js';\r\nimport Filter from '../../components/Filter/Filter.js';\r\nimport ContactList from '../../components/ContactList/ContactList.js';\r\nimport classes from '../../App.module.css';\r\n\r\nimport '../../bases.css';\r\nimport { connect } from 'react-redux';\r\nimport {getContacts} from '../../redux/reducers/contacts/contactsOperations.js';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onGetContact();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className={classes.conteiner}>\r\n          <ContactForm />\r\n\r\n          <Filter />\r\n\r\n          <ContactList />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onGetContact: getContacts,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n"],"sourceRoot":""}